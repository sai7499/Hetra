/*
       Licensed to the Apache Software Foundation (ASF) under one
       or more contributor license agreements.  See the NOTICE file
       distributed with this work for additional information
       regarding copyright ownership.  The ASF licenses this file
       to you under the Apache License, Version 2.0 (the
       "License"); you may not use this file except in compliance
       with the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing,
       software distributed under the License is distributed on an
       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
       KIND, either express or implied.  See the License for the
       specific language governing permissions and limitations
       under the License.
*/
package org.apache.cordova.device;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.TimeZone;
import java.util.regex.Pattern;

import org.apache.cordova.CordovaWebView;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.device.evolute.lilygendemoapp.GlobalPool;
import org.apache.cordova.device.evolute.lilygendemoapp.constants;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;


import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.SystemClock;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import com.lillygen.api.FpsConfig;
import com.lillygen.api.FpsImageAPI;
import com.lillygen.api.General;
import com.lillygen.api.HexString;
import com.lillygen.api.Setup;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.regex.Pattern;

import com.lillygen.api.FPS;


public class Device extends CordovaPlugin {
    public static final String TAG = "Device";

    public static String platform;                            // Device OS
    public static String uuid;                                // Device UUID

    private static final String ANDROID_PLATFORM = "Android";
    private static final String AMAZON_PLATFORM = "amazon-fireos";
    private static final String AMAZON_DEVICE = "Amazon";



    FPS fps;
    String sDevicetype;
    private GlobalPool mGP = null;
    public static BluetoothAdapter mBT = BluetoothAdapter.getDefaultAdapter();
    public static BluetoothDevice mBDevice = null;
    private Thread scanThread;
    private boolean mbBTstatusBefore = false;
    private Hashtable<String, String> mhtDeviceInfo = new Hashtable<String, String>();


    /**CONST: device type bluetooth 2.1*/
    public static final int DEVICE_TYPE_BREDR = 0x01;
    /**CONST: device type bluetooth 4.0 */
    public static final int DEVICE_TYPE_BLE = 0x02;
    /**CONST: device type bluetooth double mode*/
    public static final int DEVICE_TYPE_DUMO = 0x03;
    public final static String EXTRA_DEVICE_TYPE = "android.bluetooth.device.extra.DEVICE_TYPE";
    /** Discovery is Finished */
    private boolean _discoveryFinished;

    /**
     * Storage the found bluetooth devices
     * format:<MAC, <Key,Value>>;Key=[RSSI/NAME/COD(class of device)/BOND/UUID]
     * */
    private Hashtable<String, Hashtable<String, String>> mhtFDS = null;

    private boolean mbBonded = false;

    public static Setup setup = null;

    public General gen;

    public static Setup setupGen;

    OutputStream outputStream;
    InputStream inputStream;

    private boolean verifyUncompressed = false;

    FpsConfig fpsconfig = new FpsConfig();
    private byte[] bufValue = {};
    private int iRetVal;
    public static final int DEVICE_NOTCONNECTED = -100;
    private static final int MESSAGE_BOX = 1;
    private boolean verifyFinger = false;

    private byte[] image = {};
    private byte[] image1 = {};
    private boolean verifyCompressed = false;


    private BroadcastReceiver _mPairingRequest = new BroadcastReceiver(){
        @Override
        public void onReceive(Context context, Intent intent){
            BluetoothDevice device = null;
            if (intent.getAction().equals(BluetoothDevice.ACTION_BOND_STATE_CHANGED)){
                device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                if (device.getBondState() == BluetoothDevice.BOND_BONDED)
                    mbBonded = true;
                else
                    mbBonded = false;
            }
        }
    };


    /* Scan for Bluetooth devices. (broadcast listener) */
    private BroadcastReceiver _foundReceiver = new BroadcastReceiver(){	//TODO
        public void onReceive(Context context, Intent intent){
            /* bluetooth device profiles*/
            Hashtable<String, String> htDeviceInfo = new Hashtable<String, String>();
            System.out.println("Scan for Bluetooth devices");
            /* get the search results */
            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
            /* create found device profiles to htDeviceInfo*/
            Bundle b = intent.getExtras();
            htDeviceInfo.put("RSSI", String.valueOf(b.get(BluetoothDevice.EXTRA_RSSI)));
            if (null == device.getName())
                htDeviceInfo.put("NAME", "Null");
            else
                htDeviceInfo.put("NAME", device.getName());
            htDeviceInfo.put("COD",  String.valueOf(b.get(BluetoothDevice.EXTRA_CLASS)));
            if (device.getBondState() == BluetoothDevice.BOND_BONDED)
                htDeviceInfo.put("BOND", constants.actDiscovery_bond_bonded);
            else
                htDeviceInfo.put("BOND", constants.actDiscovery_bond_nothing);
            String exDeviceType = String.valueOf(b.get(EXTRA_DEVICE_TYPE));
            if (!exDeviceType.equals("null"))
                htDeviceInfo.put("DEVICE_TYPE", exDeviceType);
            else
                htDeviceInfo.put("DEVICE_TYPE", "-1");
            /*adding scan to the device profiles*/
            mhtFDS.put(device.getAddress(), htDeviceInfo);
            /*Refresh show list*/
            Enumeration<String> e = mhtFDS.keys();

            while (e.hasMoreElements()){
                HashMap<String, Object> map = new HashMap<String, Object>();
                String sKey = e.nextElement();
                map.put("MAC", sKey);
                map.put("NAME", mhtFDS.get(sKey).get("NAME"));
                map.put("RSSI", mhtFDS.get(sKey).get("RSSI"));
                map.put("COD", mhtFDS.get(sKey).get("COD"));
                map.put("BOND", mhtFDS.get(sKey).get("BOND"));
                map.put("DEVICE_TYPE", toDeviceTypeString(mhtFDS.get(sKey).get("DEVICE_TYPE")));

                System.out.println("Scanned Devices *******"+ map);

            }
        }

        private String toDeviceTypeString(String sDeviceTypeId){
            Pattern pt = Pattern.compile("^[-\\+]?[\\d]+$");
            if (pt.matcher(sDeviceTypeId).matches()){
                switch(Integer.valueOf(sDeviceTypeId)){
                    case DEVICE_TYPE_BREDR:
                        return constants.device_type_bredr;
                    case DEVICE_TYPE_BLE:
                        return constants.device_type_ble;
                    case DEVICE_TYPE_DUMO:
                        return constants.device_type_dumo;
                    default:
                        return constants.device_type_bredr;
                }
            }
            else
                return sDeviceTypeId;
        }
    };
    /**
     * Bluetooth scanning is finished processing.(broadcast listener)
     */
    private BroadcastReceiver _finshedReceiver = new BroadcastReceiver(){ //TODO
        @Override
        public void onReceive(Context context, Intent intent){
            System.out.println("Bluetooth scanning is finished");
            _discoveryFinished = true; //set scan is finished
            unregisterReceiver(_foundReceiver);
            unregisterReceiver(_finshedReceiver);
            if (null != mhtFDS && mhtFDS.size()>0){
                System.out.println("actDiscovery_msg_select_device");
                String sKey = "00:04:3E:6F:86:96";
              //  new PairTask().execute(sKey);
            } else {
                System.out.println("actDiscovery_msg_not_find_device");

            }
        }
    };



    /**
     * Constructor.
     */
    public Device() {
    }

    /**
     * Sets the context of the Command. This can then be used to do things like
     * get file paths associated with the Activity.
     *
     * @param cordova The context of the main Activity.
     * @param webView The CordovaWebView Cordova is running in.
     */
    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
        Device.uuid = getUuid();

    }

    /**
     * Executes the request and returns PluginResult.
     *
     * @param action            The action to execute.
     * @param args              JSONArry of arguments for the plugin.
     * @param callbackContext   The callback id used when calling back into JavaScript.
     * @return                  True if the action was valid, false if not.
     */
    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {


        if ("getDeviceInfo".equals(action)) {
            JSONObject r = new JSONObject();
            r.put("uuid", Device.uuid);
            r.put("version", this.getOSVersion());
            r.put("platform", this.getPlatform());
            r.put("model", this.getModel());
            r.put("manufacturer", this.getManufacturer());
	        r.put("isVirtual", this.isVirtual());
            r.put("serial", this.getSerialNumber());
            callbackContext.success(r);
        }
        else {
            return false;
        }
        return true;
    }

    //--------------------------------------------------------------------------
    // LOCAL METHODS
    //--------------------------------------------------------------------------

    /**
     * Get the OS name.
     *
     * @return
     */
    public String getPlatform() {
        String platform;
        if (isAmazonDevice()) {
            platform = AMAZON_PLATFORM;
        } else {
            platform = ANDROID_PLATFORM;
        }
        return platform;
    }

    /**
     * Get the device's Universally Unique Identifier (UUID).
     *
     * @return
     */
    public String getUuid() {
        String uuid = Settings.Secure.getString(this.cordova.getActivity().getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
        return uuid;
    }

    public String getModel() {
        String model = android.os.Build.MODEL;
        return model;
    }

    public String getProductName() {
        String productname = android.os.Build.PRODUCT;
        return productname;
    }

    public String getManufacturer() {
        String manufacturer = android.os.Build.MANUFACTURER;
        return manufacturer;
    }

    public String getSerialNumber() {
        String serial = android.os.Build.SERIAL;
        return serial;
    }

    /**
     * Get the OS version.
     *
     * @return
     */
    public String getOSVersion() {
        String osversion = android.os.Build.VERSION.RELEASE;
        return osversion;
    }

    public String getSDKVersion() {
        @SuppressWarnings("deprecation")
        String sdkversion = android.os.Build.VERSION.SDK;
        return sdkversion;
    }

    public String getTimeZoneID() {
        TimeZone tz = TimeZone.getDefault();
        return (tz.getID());
    }

    /**
     * Function to check if the device is manufactured by Amazon
     *
     * @return
     */
    public boolean isAmazonDevice() {
        if (android.os.Build.MANUFACTURER.equals(AMAZON_DEVICE)) {
            return true;
        }
        return false;
    }

    public boolean isVirtual() {
	return android.os.Build.FINGERPRINT.contains("generic") ||
	    android.os.Build.PRODUCT.contains("sdk");
    }

}
